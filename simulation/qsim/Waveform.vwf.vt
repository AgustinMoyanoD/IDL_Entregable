// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/28/2025 15:16:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Incrementador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Incrementador_vlg_sample_tst(
	ActivarConteo,
	b0,
	b1,
	b2,
	ClockIn,
	Data0,
	data1,
	data2,
	data3,
	data4,
	data5,
	data6,
	data7,
	data8,
	data9,
	data10,
	data11,
	ResetFFIn,
	signob,
	sampler_tx
);
input  ActivarConteo;
input  b0;
input  b1;
input  b2;
input  ClockIn;
input  Data0;
input  data1;
input  data2;
input  data3;
input  data4;
input  data5;
input  data6;
input  data7;
input  data8;
input  data9;
input  data10;
input  data11;
input  ResetFFIn;
input  signob;
output sampler_tx;

reg sample;
time current_time;
always @(ActivarConteo or b0 or b1 or b2 or ClockIn or Data0 or data1 or data2 or data3 or data4 or data5 or data6 or data7 or data8 or data9 or data10 or data11 or ResetFFIn or signob)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Incrementador_vlg_check_tst (
	CarryFinal,
	enableWrite,
	ou0,
	ou1,
	ou2,
	ou3,
	ou4,
	ou5,
	ou6,
	ou7,
	ou8,
	ou9,
	ou10,
	ou11,
	selectSel,
	sampler_rx
);
input  CarryFinal;
input  enableWrite;
input  ou0;
input  ou1;
input  ou2;
input  ou3;
input  ou4;
input  ou5;
input  ou6;
input  ou7;
input  ou8;
input  ou9;
input  ou10;
input  ou11;
input  selectSel;
input sampler_rx;

reg  CarryFinal_expected;
reg  enableWrite_expected;
reg  ou0_expected;
reg  ou1_expected;
reg  ou2_expected;
reg  ou3_expected;
reg  ou4_expected;
reg  ou5_expected;
reg  ou6_expected;
reg  ou7_expected;
reg  ou8_expected;
reg  ou9_expected;
reg  ou10_expected;
reg  ou11_expected;
reg  selectSel_expected;

reg  CarryFinal_prev;
reg  enableWrite_prev;
reg  ou0_prev;
reg  ou1_prev;
reg  ou2_prev;
reg  ou3_prev;
reg  ou4_prev;
reg  ou5_prev;
reg  ou6_prev;
reg  ou7_prev;
reg  ou8_prev;
reg  ou9_prev;
reg  ou10_prev;
reg  ou11_prev;
reg  selectSel_prev;

reg  CarryFinal_expected_prev;
reg  enableWrite_expected_prev;
reg  ou0_expected_prev;
reg  ou1_expected_prev;
reg  ou2_expected_prev;
reg  ou3_expected_prev;
reg  ou4_expected_prev;
reg  ou5_expected_prev;
reg  ou6_expected_prev;
reg  ou7_expected_prev;
reg  ou8_expected_prev;
reg  ou9_expected_prev;
reg  ou10_expected_prev;
reg  ou11_expected_prev;
reg  selectSel_expected_prev;

reg  last_CarryFinal_exp;
reg  last_enableWrite_exp;
reg  last_ou0_exp;
reg  last_ou1_exp;
reg  last_ou2_exp;
reg  last_ou3_exp;
reg  last_ou4_exp;
reg  last_ou5_exp;
reg  last_ou6_exp;
reg  last_ou7_exp;
reg  last_ou8_exp;
reg  last_ou9_exp;
reg  last_ou10_exp;
reg  last_ou11_exp;
reg  last_selectSel_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	CarryFinal_prev = CarryFinal;
	enableWrite_prev = enableWrite;
	ou0_prev = ou0;
	ou1_prev = ou1;
	ou2_prev = ou2;
	ou3_prev = ou3;
	ou4_prev = ou4;
	ou5_prev = ou5;
	ou6_prev = ou6;
	ou7_prev = ou7;
	ou8_prev = ou8;
	ou9_prev = ou9;
	ou10_prev = ou10;
	ou11_prev = ou11;
	selectSel_prev = selectSel;
end

// update expected /o prevs

always @(trigger)
begin
	CarryFinal_expected_prev = CarryFinal_expected;
	enableWrite_expected_prev = enableWrite_expected;
	ou0_expected_prev = ou0_expected;
	ou1_expected_prev = ou1_expected;
	ou2_expected_prev = ou2_expected;
	ou3_expected_prev = ou3_expected;
	ou4_expected_prev = ou4_expected;
	ou5_expected_prev = ou5_expected;
	ou6_expected_prev = ou6_expected;
	ou7_expected_prev = ou7_expected;
	ou8_expected_prev = ou8_expected;
	ou9_expected_prev = ou9_expected;
	ou10_expected_prev = ou10_expected;
	ou11_expected_prev = ou11_expected;
	selectSel_expected_prev = selectSel_expected;
end



// expected CarryFinal
initial
begin
	CarryFinal_expected = 1'bX;
end 

// expected enableWrite
initial
begin
	enableWrite_expected = 1'bX;
end 

// expected selectSel
initial
begin
	selectSel_expected = 1'bX;
end 

// expected ou11
initial
begin
	ou11_expected = 1'bX;
end 

// expected ou10
initial
begin
	ou10_expected = 1'bX;
end 

// expected ou9
initial
begin
	ou9_expected = 1'bX;
end 

// expected ou8
initial
begin
	ou8_expected = 1'bX;
end 

// expected ou7
initial
begin
	ou7_expected = 1'bX;
end 

// expected ou6
initial
begin
	ou6_expected = 1'bX;
end 

// expected ou5
initial
begin
	ou5_expected = 1'bX;
end 

// expected ou4
initial
begin
	ou4_expected = 1'bX;
end 

// expected ou3
initial
begin
	ou3_expected = 1'bX;
end 

// expected ou2
initial
begin
	ou2_expected = 1'bX;
end 

// expected ou1
initial
begin
	ou1_expected = 1'bX;
end 

// expected ou0
initial
begin
	ou0_expected = 1'bX;
end 
// generate trigger
always @(CarryFinal_expected or CarryFinal or enableWrite_expected or enableWrite or ou0_expected or ou0 or ou1_expected or ou1 or ou2_expected or ou2 or ou3_expected or ou3 or ou4_expected or ou4 or ou5_expected or ou5 or ou6_expected or ou6 or ou7_expected or ou7 or ou8_expected or ou8 or ou9_expected or ou9 or ou10_expected or ou10 or ou11_expected or ou11 or selectSel_expected or selectSel)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CarryFinal = %b | expected enableWrite = %b | expected ou0 = %b | expected ou1 = %b | expected ou2 = %b | expected ou3 = %b | expected ou4 = %b | expected ou5 = %b | expected ou6 = %b | expected ou7 = %b | expected ou8 = %b | expected ou9 = %b | expected ou10 = %b | expected ou11 = %b | expected selectSel = %b | ",CarryFinal_expected_prev,enableWrite_expected_prev,ou0_expected_prev,ou1_expected_prev,ou2_expected_prev,ou3_expected_prev,ou4_expected_prev,ou5_expected_prev,ou6_expected_prev,ou7_expected_prev,ou8_expected_prev,ou9_expected_prev,ou10_expected_prev,ou11_expected_prev,selectSel_expected_prev);
	$display("| real CarryFinal = %b | real enableWrite = %b | real ou0 = %b | real ou1 = %b | real ou2 = %b | real ou3 = %b | real ou4 = %b | real ou5 = %b | real ou6 = %b | real ou7 = %b | real ou8 = %b | real ou9 = %b | real ou10 = %b | real ou11 = %b | real selectSel = %b | ",CarryFinal_prev,enableWrite_prev,ou0_prev,ou1_prev,ou2_prev,ou3_prev,ou4_prev,ou5_prev,ou6_prev,ou7_prev,ou8_prev,ou9_prev,ou10_prev,ou11_prev,selectSel_prev);
`endif
	if (
		( CarryFinal_expected_prev !== 1'bx ) && ( CarryFinal_prev !== CarryFinal_expected_prev )
		&& ((CarryFinal_expected_prev !== last_CarryFinal_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CarryFinal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CarryFinal_expected_prev);
		$display ("     Real value = %b", CarryFinal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CarryFinal_exp = CarryFinal_expected_prev;
	end
	if (
		( enableWrite_expected_prev !== 1'bx ) && ( enableWrite_prev !== enableWrite_expected_prev )
		&& ((enableWrite_expected_prev !== last_enableWrite_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enableWrite :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enableWrite_expected_prev);
		$display ("     Real value = %b", enableWrite_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_enableWrite_exp = enableWrite_expected_prev;
	end
	if (
		( ou0_expected_prev !== 1'bx ) && ( ou0_prev !== ou0_expected_prev )
		&& ((ou0_expected_prev !== last_ou0_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ou0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ou0_expected_prev);
		$display ("     Real value = %b", ou0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ou0_exp = ou0_expected_prev;
	end
	if (
		( ou1_expected_prev !== 1'bx ) && ( ou1_prev !== ou1_expected_prev )
		&& ((ou1_expected_prev !== last_ou1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ou1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ou1_expected_prev);
		$display ("     Real value = %b", ou1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ou1_exp = ou1_expected_prev;
	end
	if (
		( ou2_expected_prev !== 1'bx ) && ( ou2_prev !== ou2_expected_prev )
		&& ((ou2_expected_prev !== last_ou2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ou2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ou2_expected_prev);
		$display ("     Real value = %b", ou2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ou2_exp = ou2_expected_prev;
	end
	if (
		( ou3_expected_prev !== 1'bx ) && ( ou3_prev !== ou3_expected_prev )
		&& ((ou3_expected_prev !== last_ou3_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ou3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ou3_expected_prev);
		$display ("     Real value = %b", ou3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ou3_exp = ou3_expected_prev;
	end
	if (
		( ou4_expected_prev !== 1'bx ) && ( ou4_prev !== ou4_expected_prev )
		&& ((ou4_expected_prev !== last_ou4_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ou4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ou4_expected_prev);
		$display ("     Real value = %b", ou4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ou4_exp = ou4_expected_prev;
	end
	if (
		( ou5_expected_prev !== 1'bx ) && ( ou5_prev !== ou5_expected_prev )
		&& ((ou5_expected_prev !== last_ou5_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ou5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ou5_expected_prev);
		$display ("     Real value = %b", ou5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ou5_exp = ou5_expected_prev;
	end
	if (
		( ou6_expected_prev !== 1'bx ) && ( ou6_prev !== ou6_expected_prev )
		&& ((ou6_expected_prev !== last_ou6_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ou6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ou6_expected_prev);
		$display ("     Real value = %b", ou6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ou6_exp = ou6_expected_prev;
	end
	if (
		( ou7_expected_prev !== 1'bx ) && ( ou7_prev !== ou7_expected_prev )
		&& ((ou7_expected_prev !== last_ou7_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ou7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ou7_expected_prev);
		$display ("     Real value = %b", ou7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ou7_exp = ou7_expected_prev;
	end
	if (
		( ou8_expected_prev !== 1'bx ) && ( ou8_prev !== ou8_expected_prev )
		&& ((ou8_expected_prev !== last_ou8_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ou8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ou8_expected_prev);
		$display ("     Real value = %b", ou8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_ou8_exp = ou8_expected_prev;
	end
	if (
		( ou9_expected_prev !== 1'bx ) && ( ou9_prev !== ou9_expected_prev )
		&& ((ou9_expected_prev !== last_ou9_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ou9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ou9_expected_prev);
		$display ("     Real value = %b", ou9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_ou9_exp = ou9_expected_prev;
	end
	if (
		( ou10_expected_prev !== 1'bx ) && ( ou10_prev !== ou10_expected_prev )
		&& ((ou10_expected_prev !== last_ou10_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ou10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ou10_expected_prev);
		$display ("     Real value = %b", ou10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_ou10_exp = ou10_expected_prev;
	end
	if (
		( ou11_expected_prev !== 1'bx ) && ( ou11_prev !== ou11_expected_prev )
		&& ((ou11_expected_prev !== last_ou11_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ou11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ou11_expected_prev);
		$display ("     Real value = %b", ou11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_ou11_exp = ou11_expected_prev;
	end
	if (
		( selectSel_expected_prev !== 1'bx ) && ( selectSel_prev !== selectSel_expected_prev )
		&& ((selectSel_expected_prev !== last_selectSel_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port selectSel :: @time = %t",  $realtime);
		$display ("     Expected value = %b", selectSel_expected_prev);
		$display ("     Real value = %b", selectSel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_selectSel_exp = selectSel_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Incrementador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ActivarConteo;
reg b0;
reg b1;
reg b2;
reg ClockIn;
reg Data0;
reg data1;
reg data2;
reg data3;
reg data4;
reg data5;
reg data6;
reg data7;
reg data8;
reg data9;
reg data10;
reg data11;
reg ResetFFIn;
reg signob;
// wires                                               
wire CarryFinal;
wire enableWrite;
wire ou0;
wire ou1;
wire ou2;
wire ou3;
wire ou4;
wire ou5;
wire ou6;
wire ou7;
wire ou8;
wire ou9;
wire ou10;
wire ou11;
wire selectSel;

wire sampler;                             

// assign statements (if any)                          
Incrementador i1 (
// port map - connection between master ports and signals/registers   
	.ActivarConteo(ActivarConteo),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.CarryFinal(CarryFinal),
	.ClockIn(ClockIn),
	.Data0(Data0),
	.data1(data1),
	.data2(data2),
	.data3(data3),
	.data4(data4),
	.data5(data5),
	.data6(data6),
	.data7(data7),
	.data8(data8),
	.data9(data9),
	.data10(data10),
	.data11(data11),
	.enableWrite(enableWrite),
	.ou0(ou0),
	.ou1(ou1),
	.ou2(ou2),
	.ou3(ou3),
	.ou4(ou4),
	.ou5(ou5),
	.ou6(ou6),
	.ou7(ou7),
	.ou8(ou8),
	.ou9(ou9),
	.ou10(ou10),
	.ou11(ou11),
	.ResetFFIn(ResetFFIn),
	.selectSel(selectSel),
	.signob(signob)
);

// ActivarConteo
initial
begin
	ActivarConteo = 1'b1;
end 

// signob
initial
begin
	signob = 1'b1;
end 

// b2
initial
begin
	b2 = 1'b0;
end 

// b1
initial
begin
	b1 = 1'b1;
end 

// b0
initial
begin
	b0 = 1'b1;
end 

// ClockIn
always
begin
	ClockIn = 1'b0;
	ClockIn = #5000 1'b1;
	#5000;
end 

// data11
initial
begin
	data11 = 1'b0;
end 

// data10
initial
begin
	data10 = 1'b0;
end 

// data9
initial
begin
	data9 = 1'b0;
end 

// data8
initial
begin
	data8 = 1'b0;
end 

// data7
initial
begin
	data7 = 1'b0;
end 

// data6
initial
begin
	data6 = 1'b0;
end 

// data5
initial
begin
	data5 = 1'b0;
end 

// data4
initial
begin
	data4 = 1'b1;
end 

// data3
initial
begin
	data3 = 1'b1;
end 

// data2
initial
begin
	data2 = 1'b1;
end 

// data1
initial
begin
	data1 = 1'b1;
end 

// Data0
initial
begin
	Data0 = 1'b0;
end 

// ResetFFIn
initial
begin
	ResetFFIn = 1'b0;
	ResetFFIn = #10000 1'b1;
end 

Incrementador_vlg_sample_tst tb_sample (
	.ActivarConteo(ActivarConteo),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.ClockIn(ClockIn),
	.Data0(Data0),
	.data1(data1),
	.data2(data2),
	.data3(data3),
	.data4(data4),
	.data5(data5),
	.data6(data6),
	.data7(data7),
	.data8(data8),
	.data9(data9),
	.data10(data10),
	.data11(data11),
	.ResetFFIn(ResetFFIn),
	.signob(signob),
	.sampler_tx(sampler)
);

Incrementador_vlg_check_tst tb_out(
	.CarryFinal(CarryFinal),
	.enableWrite(enableWrite),
	.ou0(ou0),
	.ou1(ou1),
	.ou2(ou2),
	.ou3(ou3),
	.ou4(ou4),
	.ou5(ou5),
	.ou6(ou6),
	.ou7(ou7),
	.ou8(ou8),
	.ou9(ou9),
	.ou10(ou10),
	.ou11(ou11),
	.selectSel(selectSel),
	.sampler_rx(sampler)
);
endmodule

