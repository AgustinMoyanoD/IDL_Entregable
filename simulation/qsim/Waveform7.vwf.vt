// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/22/2025 15:26:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    compa4bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module compa4bits_vlg_sample_tst(
	A0,
	A1,
	A2,
	A3,
	B0,
	B1,
	B2,
	B3,
	sampler_tx
);
input  A0;
input  A1;
input  A2;
input  A3;
input  B0;
input  B1;
input  B2;
input  B3;
output sampler_tx;

reg sample;
time current_time;
always @(A0 or A1 or A2 or A3 or B0 or B1 or B2 or B3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module compa4bits_vlg_check_tst (
	igual,
	mayor,
	menor,
	sampler_rx
);
input  igual;
input  mayor;
input  menor;
input sampler_rx;

reg  igual_expected;
reg  mayor_expected;
reg  menor_expected;

reg  igual_prev;
reg  mayor_prev;
reg  menor_prev;

reg  igual_expected_prev;
reg  mayor_expected_prev;
reg  menor_expected_prev;

reg  last_igual_exp;
reg  last_mayor_exp;
reg  last_menor_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	igual_prev = igual;
	mayor_prev = mayor;
	menor_prev = menor;
end

// update expected /o prevs

always @(trigger)
begin
	igual_expected_prev = igual_expected;
	mayor_expected_prev = mayor_expected;
	menor_expected_prev = menor_expected;
end



// expected igual
initial
begin
	igual_expected = 1'bX;
end 

// expected mayor
initial
begin
	mayor_expected = 1'bX;
end 

// expected menor
initial
begin
	menor_expected = 1'bX;
end 
// generate trigger
always @(igual_expected or igual or mayor_expected or mayor or menor_expected or menor)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected igual = %b | expected mayor = %b | expected menor = %b | ",igual_expected_prev,mayor_expected_prev,menor_expected_prev);
	$display("| real igual = %b | real mayor = %b | real menor = %b | ",igual_prev,mayor_prev,menor_prev);
`endif
	if (
		( igual_expected_prev !== 1'bx ) && ( igual_prev !== igual_expected_prev )
		&& ((igual_expected_prev !== last_igual_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port igual :: @time = %t",  $realtime);
		$display ("     Expected value = %b", igual_expected_prev);
		$display ("     Real value = %b", igual_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_igual_exp = igual_expected_prev;
	end
	if (
		( mayor_expected_prev !== 1'bx ) && ( mayor_prev !== mayor_expected_prev )
		&& ((mayor_expected_prev !== last_mayor_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port mayor :: @time = %t",  $realtime);
		$display ("     Expected value = %b", mayor_expected_prev);
		$display ("     Real value = %b", mayor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_mayor_exp = mayor_expected_prev;
	end
	if (
		( menor_expected_prev !== 1'bx ) && ( menor_prev !== menor_expected_prev )
		&& ((menor_expected_prev !== last_menor_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port menor :: @time = %t",  $realtime);
		$display ("     Expected value = %b", menor_expected_prev);
		$display ("     Real value = %b", menor_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_menor_exp = menor_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module compa4bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg B0;
reg B1;
reg B2;
reg B3;
// wires                                               
wire igual;
wire mayor;
wire menor;

wire sampler;                             

// assign statements (if any)                          
compa4bits i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.igual(igual),
	.mayor(mayor),
	.menor(menor)
);

// A0
initial
begin
	A0 = 1'b0;
end 

// A1
initial
begin
	A1 = 1'b0;
	A1 = #640000 1'b1;
end 

// A2
initial
begin
	A2 = 1'b0;
	A2 = #320000 1'b1;
	A2 = #320000 1'b0;
	A2 = #320000 1'b1;
end 

// A3
initial
begin
	repeat(3)
	begin
		A3 = 1'b0;
		A3 = #160000 1'b1;
		# 160000;
	end
	A3 = 1'b0;
end 

// B0
initial
begin
	repeat(6)
	begin
		B0 = 1'b0;
		B0 = #80000 1'b1;
		# 80000;
	end
	B0 = 1'b0;
end 

// B1
initial
begin
	repeat(12)
	begin
		B1 = 1'b0;
		B1 = #40000 1'b1;
		# 40000;
	end
	B1 = 1'b0;
end 

// B2
always
begin
	B2 = 1'b0;
	B2 = #20000 1'b1;
	#20000;
end 

// B3
always
begin
	B3 = 1'b0;
	B3 = #10000 1'b1;
	#10000;
end 

compa4bits_vlg_sample_tst tb_sample (
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.sampler_tx(sampler)
);

compa4bits_vlg_check_tst tb_out(
	.igual(igual),
	.mayor(mayor),
	.menor(menor),
	.sampler_rx(sampler)
);
endmodule

